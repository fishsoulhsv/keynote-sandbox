property placeholderText : "Cras justo odio, dapibus ac facilisis in, egestas eget quam. Praesent commodo cursus magna, vel scelerisque nisl consectetur et. Nulla vitae elit libero, a pharetra augue. Vestibulum id ligula porta felis euismod semper. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.
	 
Cras mattis consectetur purus sit amet fermentum. Morbi leo risus, porta ac consectetur ac, vestibulum at eros. Maecenas sed diam eget risus varius blandit sit amet non magna. Fusce dapibus, tellus ac cursus commodo, tortor mauris condimentum nibh, ut fermentum massa justo sit amet risus. Duis mollis, est non commodo luctus, nisi erat porttitor ligula, eget lacinia odio sem nec elit.
	 
Sed posuere consectetur est at lobortis. Maecenas faucibus mollis interdum. Etiam porta sem malesuada magna mollis euismod. Nullam id dolor id nibh ultricies vehicula ut id elit."

script chartLabel
	property text : null
	property x : null
	property y : null
end script

on createActsEvent(argDate, argRef, argText)
	
	(*
	log "argument date =" & argDate
	log "argument reference =" & argRef
	log "argument text =" & argText
	*)
	
	script ActsEvent
		property myDate : null
		property myReference : null
		property myText : null
		
		on getDate()
			return myDate as string
		end getDate
		
		on setDate(newDate)
			set myDate to newDate
		end setDate
		
		on getRef()
			return myReference
		end getRef
		
		on setRef(newRef)
			set myReference to newRef
		end setRef
		
		on getText()
			return myText
		end getText
		
		on setText(newText)
			set myText to newText
		end setText
		
	end script
	
	tell ActsEvent
		setDate(argDate)
		setRef(argRef)
		setText(argText)
	end tell
	
	return ActsEvent
	
end createActsEvent

(*
log "Creating Acts Event"
set anEvent to createActsEvent(30, "Acts 1", "Ascension")
log "Date: " & (anEvent's getDate())
*)

-- Initialize all the labels (date, Acts reference, text)

set labelList to {¬
	createActsEvent(30, "0:0", "Crucifixion and Resurrection"), ¬
	createActsEvent(30.11, "1:0", "Ascension"), ¬
	createActsEvent(30.14, "2:0", "Holy Spirit comes at Pentecost"), ¬
	createActsEvent(31, "8:0", "Saul persecutes the church"), ¬
	createActsEvent(62, "28:0", "Paul in Rome") ¬
		}

on bulletize(textItem)
	-- Add a bullet to the left of this textItem
	
end bulletize

tell application "Keynote"
	activate
	tell document 1
		
		-- Collect parameters we need.
		set documentWidth to its width
		log "documentWidth = " & documentWidth
		set documentHeight to its height
		set documentWidthThird to documentWidth div 3
		set documentHeightThird to documentHeight div 3
		
		tell the last slide
			
			(*
			
			delete every shape
			delete every image
			set body showing to false
			set title showing to false
			set presenter notes to "Auto-generated by AppleScript"
			*)
			
			(*
			-- HORIZONTAL LINES (We don't *have* to "set thisLine" we can just start with "make"
			set thisLine to make new line with properties {start point:{0, documentHeightThird}, end point:{documentWidth, documentHeightThird}, reflection showing:false, reflection value:100}
			set thisLine to make new line with properties {start point:{0, documentHeightThird * 2}, end point:{documentWidth, documentHeightThird * 2}, reflection showing:false, reflection value:100}
			-- VERTICAL LINES
			set thisLine to make new line with properties {start point:{documentWidthThird, 0}, end point:{documentWidthThird, documentHeight}, reflection showing:false, reflection value:100}
			set thisLine to make new line with properties {start point:{documentWidthThird * 2, 0}, end point:{documentWidthThird * 2, documentHeight}, reflection showing:false, reflection value:100}
			
			-- shape with text in it.
			set shapeWidth to (documentWidth * 0.75)
			set shapeHeight to (documentHeight * 0.75)
			set shapeHorizontal to (documentWidth - shapeWidth) div 2
			set shapeVertical to (documentHeight - shapeHeight) div 2
			set thisShape to ¬
				make new shape with properties ¬
					{position:{shapeHorizontal, shapeVertical} ¬
						, width:shapeWidth ¬
						, height:shapeHeight ¬
						, opacity:100 ¬
						, object text:anEvent's getDate(), rotation:100 ¬
						}
			*)
			
			-- Loop over the labels in labelList
			set minYear to 30
			set maxYear to 62
			set minX to 100
			set maxX to documentWidth - minX
			set m to (maxX - minX) / (maxYear - minYear)
			set y to 300
			set rot to 0 -- -45
			
			(*			
			repeat with i from 1 to length of labelList
				set theLabel to item i of labelList
				log "label " & i & ": " & theLabel's getText()
				set x to minX + m * ((theLabel's getDate()) - minYear)
				log "x=" & x
				set textItem to make new text item with properties ¬
					{position:{x, y} ¬
						, opacity:100 ¬
						, object text:theLabel's getText() ¬
						, rotation:rot ¬
						}
				
				if rot ≠ 0 then
					-- Because rotation rotates about the center of the text item, we have to MOVE the item back to where we wanted it.
					set textItem's position to {x, y}
				else -- rot IS 0
					-- Add some offset to y instead for the next item we draw
					set y to y + (textItem's height)
					
					tell textItem
						
					end tell
					
				end if
				
			end repeat
			*)
			
			(*
			-- put the chapters on the slide
			set minChap to 1
			set maxChap to 28
			set minX to 100
			set maxX to documentWidth - minX
			set m to (maxX - minX) / (maxChap - minChap)
			set y to 300
			
			repeat with i from minChap to maxChap
				set x to minX + m * (i - minChap)
				set tItm to make new text item with properties ¬
					{position:{x, y}, object text:i as string}
			end repeat
			*)
			
			(*
			-- put the years on the slide
			set minYr to 30
			set maxYr to 62
			set minX to 100
			set maxX to documentWidth - minX
			set m to (maxX - minX) / (maxYr - minYr)
			set y to 400
			
			
			repeat with i from minYr to maxYr
				set x to minX + m * (i - minYr)
				set tItm to make new text item with properties ¬
					{position:{x, y}, object text:i as string}
			end repeat
			*)
			
		end tell
		
		
	end tell
end tell
